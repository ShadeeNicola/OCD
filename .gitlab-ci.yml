# GitLab CI: Build all platform binaries on tag and publish a Release with assets

stages:
  - build
  - release

variables:
  CGO_ENABLED: "0"
  GOTOOLCHAIN: "go1.24.5"
  GOPROXY: "direct"
  GOSUMDB: "off"
  GOFLAGS: "-mod=vendor"

build_all:
  stage: build
  image: golang:1.24.5
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - go version
    # Build using vendored dependencies (no external network required)
    - cd app
    - mkdir -p ../dist
    # Windows
    - |
      VERSION_TAG=${CI_COMMIT_TAG:-dev}
      COMMIT_SHA=$(git rev-parse --short HEAD)
      BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
      LDFLAGS="-s -w -X app/internal/version.Version=$VERSION_TAG -X app/internal/version.Commit=$COMMIT_SHA -X app/internal/version.Date=$BUILD_DATE"
      GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o ../dist/OCD.exe ./cmd/ocd-gui
    # Linux
    - GOOS=linux GOARCH=amd64 go build  -ldflags="$LDFLAGS" -o ../dist/OCD-Tool-Linux-x64       ./cmd/ocd-gui
    - GOOS=linux GOARCH=386   go build  -ldflags="$LDFLAGS" -o ../dist/OCD-Tool-Linux-x86       ./cmd/ocd-gui
    - GOOS=linux GOARCH=arm64 go build  -ldflags="$LDFLAGS" -o ../dist/OCD-Tool-Linux-ARM64     ./cmd/ocd-gui
    - GOOS=linux GOARCH=arm   go build  -ldflags="$LDFLAGS" -o ../dist/OCD-Tool-Linux-ARM       ./cmd/ocd-gui
    # macOS (cross-compile OK for pure Go)
    - GOOS=darwin GOARCH=amd64 go build -ldflags="$LDFLAGS" -o ../dist/OCD-Tool-macOS-Intel      ./cmd/ocd-gui
    - GOOS=darwin GOARCH=arm64 go build -ldflags="$LDFLAGS" -o ../dist/OCD-Tool-macOS-AppleSilicon ./cmd/ocd-gui
    # Checksums
    - cd ../dist && sha256sum * > SHA256SUMS.txt && cd ../app
  artifacts:
    paths:
      - dist/**
    expire_in: 2 weeks

release:
  stage: release
  image: alpine:3.19
  needs: [build_all]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      set -e
      echo "Installing curl and jq"
      apk add --no-cache curl jq >/dev/null
      echo "Cleaning existing release asset links"
      echo "Creating release via API for $CI_COMMIT_TAG"
      echo "Listing dist/ contents"
      ls -lah dist || { echo "ERROR: dist/ directory not found"; exit 1; }
      expected="OCD.exe OCD-Tool-Linux-x64 OCD-Tool-Linux-x86 OCD-Tool-Linux-ARM64 OCD-Tool-Linux-ARM OCD-Tool-macOS-Intel OCD-Tool-macOS-AppleSilicon SHA256SUMS.txt"
      missing=0
      for f in $expected; do
        if [ ! -f "dist/$f" ]; then echo "MISSING: dist/$f"; missing=1; fi
      done
      if [ "$missing" = 1 ]; then echo "One or more expected artifacts are missing"; exit 1; fi
      curl -sk --request POST \
        --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --data "name=OCD $CI_COMMIT_TAG&tag_name=$CI_COMMIT_TAG&description=Auto-generated release for $CI_COMMIT_TAG" \
        "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/releases" \
        || echo "release may already exist"
      # Remove any existing asset links to avoid duplicates, then upload fresh
      existing=$(curl -sk --header "JOB-TOKEN: $CI_JOB_TOKEN" "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links" || true)
      for id in $(echo "$existing" | grep -o '"id":[0-9]\+' | awk -F: '{print $2}'); do \
        curl -sk --request DELETE --header "JOB-TOKEN: $CI_JOB_TOKEN" "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links/$id" >/dev/null || true; \
      done
      for f in dist/*; do \
        echo "Uploading $f"; \
        RESP=$(curl -sk --request POST --header "JOB-TOKEN: $CI_JOB_TOKEN" --form "file=@$f" "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/uploads"); \
        URL=$(echo "$RESP" | jq -r '.url'); \
        NAME=$(basename "$f"); \
        FULL_URL="$CI_PROJECT_URL$URL"; \
        curl -sk --request POST --header "JOB-TOKEN: $CI_JOB_TOKEN" --data-urlencode "name=$NAME" --data-urlencode "url=$FULL_URL" "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links"; \
      done


